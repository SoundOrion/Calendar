@page "/table004"
@using BlazorAppCalendar.Data

<PageTitle>Monthly</PageTitle>
<h1>カレンダーを作成する</h1>

<br />

<select @bind="selectedYear" class="form-select-sm">
    @if (years != null) foreach (var item in years)
        {
            <option value="@item.Key">@item.Value</option>
        }
</select>

<select @bind="selectedMonth" class="form-select-sm">
    @if (months != null) foreach (var item in months)
        {
            <option value="@item.Key">@item.Value</option>
        }
</select>

<br />

<br />
<button class="btn btn-primary" @onclick="previous">前月</button>
<button class="btn btn-primary" @onclick="next">翌月</button>
<br />

<div class="calendar">

    <div>
        <div class="calendar-weekly">
            @if (dayOfWeekNames != null) foreach (var item in dayOfWeekNames)
                {
                    <div class="calendar-youbi">
                        @item.Value
                    </div>
                }
        </div>
    </div>

    <div>
        @for (int i = 0; i < 6; i++)
        {
            if (i == 0)
            {
                CalendarDays = new List<List<Calendar>>();
            }

            var dayOfWeek = GetDayOfWeek(selectedYear, selectedMonth, 1);
            var days = GetCalendarDays(dayOfWeek, i, selectedYear, selectedMonth);
            CalendarDays.Add(days);
        }

        @for (int i = 0; i < 6; i++)
        {
            @for (int j = 0; j < 7; j++)
            {
                var calendar = CalendarDays[i][j];
                calendar.Events = GetDayEvents(calendar);
            }
        }



        @for (int i = 0; i < 6; i++)
        {
            var days = CalendarDays[i];

            <div class="calendar-weekly">
                @for (int j = 0; j < 7; j++)
                {
                    <div class="calendar-daily">
                        @if (DateTime.Compare(days[j].Date.Date, DateTime.Now.Date) == 0)
                        {
                            @if (days[j].Date.Day == 1)
                            {
                                <div class="calendar-today-first">
                                    @days[j].Date.ToString("M月d日")
                                </div>
                            }
                            else
                            {
                                <div class="calendar-today">
                                    @days[j].Date.Day
                                </div>
                            }
                        }
                        else
                        {
                            @if (days[j].Date.Day == 1)
                            {
                                @days[j].Date.ToString("M月d日")
                            }
                            else
                            {
                                @days[j].Date.Day
                            }
                        }

                        @foreach (var eve in days[j].Events)
                        {
                            if (eve.Width < -1000)
                            {
                                <div style="height:26px"></div>
                            }
                            else
                            {
                                @*<div class="calendar-event" style=width:200%;>*@
                                <div class="calendar-event-stripes" style=width:@eve.Width%;background-color:@eve.Color;>
                                    @*<img src="/icn-seisho-karen.png" width="20" height="20">*@
                                    @eve.Name
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {

    private Dictionary<string, string> dayOfWeekNames = new Dictionary<string, string>();
    private Dictionary<string, int> years = new Dictionary<string, int>();
    private Dictionary<string, int> months = new Dictionary<string, int>();

    private int selectedYear;
    private int selectedMonth;

    private List<Event> eventList;

    private List<List<Calendar>> CalendarDays = new List<List<Calendar>>();

    /// <summary>
    /// Start Sunday Or Monday etc ??
    /// </summary>
    private DayOfWeek OriginDayOfWeek = DayOfWeek.Sunday;

    private DayOfWeek GetDayOfWeek(int Year, int Month, int Day)
    {
        DateTime week = new DateTime(Year, Month, Day);
        return week.DayOfWeek;
    }

    private List<Calendar> GetCalendarDays(DayOfWeek dayOfWeek, int rowIndex, int Year, int Month)
    {
        int adjsut = GetDayAdjust(dayOfWeek);
        int daysInMonth = DateTime.DaysInMonth(selectedYear, selectedMonth);
        int daysInPrevMonth = GetDaysInPrevMonth(selectedYear, selectedMonth);

        List<Calendar> calendars = new List<Calendar>();

        for (int i = 0; i < 7; i++)
        {
            var calendar = new Calendar();

            var day = 7 * rowIndex + (i + 1) - adjsut;

            if (day < 1)
            {
                //前月
                if (selectedMonth == 1)
                {
                    calendar.Date = new DateTime(selectedYear - 1, 12, daysInPrevMonth + day);
                }
                else
                {
                    calendar.Date = new DateTime(selectedYear, selectedMonth - 1, daysInPrevMonth + day);
                }
            }
            else if (day > daysInMonth)
            {
                //翌月
                if (selectedMonth == 12)
                {
                    calendar.Date = new DateTime(selectedYear + 1, 1, day - daysInMonth);
                }
                else
                {
                    calendar.Date = new DateTime(selectedYear, selectedMonth + 1, day - daysInMonth);
                }
            }
            else
            {
                //当月
                calendar.Date = new DateTime(selectedYear, selectedMonth, day);
            }

            //イベントスケジュール
            @*calendar.Events = GetDayEvents(calendar, rowIndex, i);*@

            calendars.Add(calendar);
        }

        return calendars;
    }

    private int GetDayAdjust(DayOfWeek dayOfWeek)
    {
        int adjsut = (int)dayOfWeek - (int)OriginDayOfWeek;

        if (adjsut < 0)
        {
            adjsut += 7;
        }

        return adjsut;
    }

    private int GetDaysInPrevMonth(int year, int month)
    {
        if (month == 1)
        {
            return DateTime.DaysInMonth(year - 1, 12);
        }
        else
        {
            return DateTime.DaysInMonth(year, month - 1);
        }
    }

    protected override void OnInitialized()
    {
        selectedYear = DateTime.Now.Year;
        selectedMonth = DateTime.Now.Month;

        @*dayOfWeek = GetDayOfWeek(selectedYear, selectedMonth, 1);*@

        dayOfWeekNames = new Dictionary<string, string>
        {
            {"Sun", "日"},
            {"Mon", "月"},
            {"Tue", "火"},
            {"Wed", "水"},
            {"Thu", "木"},
            {"Fri", "金"},
            {"Sat", "土"},
        };

        if (OriginDayOfWeek == DayOfWeek.Monday)
        {
            dayOfWeekNames = new Dictionary<string, string>
        {
            {"Mon", "月"},
            {"Tue", "火"},
            {"Wed", "水"},
            {"Thu", "木"},
            {"Fri", "金"},
            {"Sat", "土"},
            {"Sun", "日"},
        };
        }

        years = new Dictionary<string, int>
        {
            {"2020", 2020},
            {"2021", 2021},
            {"2022", 2022},
            {"2023", 2023},
            {"2024", 2024},
            {"2025", 2025},
        };

        months = new Dictionary<string, int>
        {
@*            {"Jan", 1},
            {"Feb", 2},
            {"Mar", 3},
            {"Apr", 4},
            {"May", 5},
            {"Jun", 6},
            {"Jul", 7},
            {"Aug", 8},
            {"Sep", 9},
            {"Oct", 10},
            {"Nov", 11},
            {"Dec", 12},*@
            {"1", 1},
            {"2", 2},
            {"3", 3},
            {"4", 4},
            {"5", 5},
            {"6", 6},
            {"7", 7},
            {"8", 8},
            {"9", 9},
            {"10", 10},
            {"11", 11},
            {"12", 12},
        };

        eventList = GetEvents();
    }

    public class Calendar
    {
        public DateTime Date { get; set; }

        public List<Event> Events { get; set; }
    }

    private void next()
    {
        selectedYear = (selectedMonth == 12) ? selectedYear + 1 : selectedYear;
        selectedMonth = (selectedMonth == 12) ? 1 : selectedMonth + 1;
    }

    private void previous()
    {
        selectedYear = (selectedMonth == 1) ? selectedYear - 1 : selectedYear;
        selectedMonth = (selectedMonth == 1) ? 12 : selectedMonth - 1;
    }

    private List<Event> GetDayEvents(Calendar calendar)
    {
        var date = calendar.Date;

        List<Event> dayEvents = new List<Event>();
        List<Event> startedEvents = new List<Event>();

        for (int i = 0; i < eventList.Count; i++)
        {
            var e = eventList[i];

            var startDate = e.StartDate;
            var endDate = e.EndDate;

            if (startDate <= date && date <= endDate)
            {
                if (startDate == date)
                {
                    var dayOfWeek = startDate.DayOfWeek;
                    var width = GetEventWidth(startDate, endDate, dayOfWeek);
                    int cnt = GetStackIndex(i, startDate, startedEvents, calendar);

                    Event clone = new Event
                        {
                            Id = e.Id,
                            Name = e.Name,
                            StartDate = e.StartDate,
                            EndDate = e.EndDate,
                            Color = e.Color,
                            Width = width,
                            StackIndex = cnt,
                        };

                    dayEvents.Add(clone);
                    startedEvents.Add(clone);
                }
                else if (date.DayOfWeek == OriginDayOfWeek)
                {
                    var width = GetEventWidth(date, endDate, OriginDayOfWeek);
                    int cnt = GetStackIndex(i, date, startedEvents, calendar);
                    @*int cnt = GetStackIndex(startDate, e);*@

                    Event clone = new Event
                        {
                            Id = e.Id,
                            Name = e.Name,
                            StartDate = date,
                            EndDate = e.EndDate,
                            Color = e.Color,
                            Width = width,
                            StackIndex = cnt,
                        };

                    dayEvents.Add(clone);
                    startedEvents.Add(clone);
                }
                else
                {
                    //直近の日曜日と比較する
                    startDate = GetNearDate(date, startDate);

                    @*int cnt = GetStackIndex(i, startDate, startedEvents, calendar);*@
                    int cnt = GetStackIndex(startDate, e);

                    Event clone = new Event
                        {
                            Id = e.Id,
                            Name = e.Name,
                            StartDate = startDate,
                            EndDate = e.EndDate,
                            Color = e.Color,
                            Width = -9999,  //dummy
                            StackIndex = cnt,
                        };
                    dayEvents.Add(clone);
                    startedEvents.Add(clone);
                }

            }
        }

        @*startedEvents.Sort((a, b) => a.StackIndex.CompareTo(b.StackIndex));*@
        dayEvents.Sort((a, b) => a.StackIndex.CompareTo(b.StackIndex));

        return dayEvents;
    }

    /// <summary>
    ///width:95%にしとく
    /// </summary>
    /// <param name="startDate"></param>
    /// <param name="endDate"></param>
    /// <param name="dayOfWeek"></param>
    /// <returns></returns>
    private double GetEventWidth(DateTime startDate, DateTime endDate, DayOfWeek dayOfWeek)
    {
        var betweenDays = (endDate - startDate).TotalDays;
        if (betweenDays > 6 - GetDayAdjust(dayOfWeek))
        {
            return (double)(6 - GetDayAdjust(dayOfWeek)) * 100 + 95;
        }
        else
        {
            return betweenDays * 100 + 95;
        }
    }

    private DateTime GetNearDate(DateTime date, DateTime startDate)
    {
        //直近の日曜日（月曜日）と比較して日付取得
        var nearDate = date;
        while (nearDate > startDate)
        {
            if (nearDate.DayOfWeek == OriginDayOfWeek)
            {
                break;
            }
            nearDate = nearDate.AddDays(-1);
        }
        return nearDate;
    }

    private int GetStackIndex(int index, DateTime date, List<Event> startedEvents, Calendar calendar)
    {
        HashSet<int> indexList = new HashSet<int>();

        if (calendar.Events != null)
        {
            foreach (var eve in calendar.Events)
            {
                indexList.Add(eve.StackIndex);
            }
        }

        if (startedEvents != null)
        {
            foreach (var eve in startedEvents)
            {
                indexList.Add(eve.StackIndex);
            }
        }

        int ret = 0;
        while (true)
        {
            if (!indexList.Contains(ret))
            {
                return ret;
            }
            ++ret;
        }
    }

    private int GetStackIndex(DateTime date, Event eve)
    {
        int cnt = 0;

        for (int i = 0; i < 6; i++)
        {
            for (int j = 0; j < 7; j++)
            {
                var cal = CalendarDays[i][j];

                if (date == cal.Date)
                {
                    cnt = cal.Events.Where(x => x.Id == eve.Id)
                        .Select(x => x.StackIndex).FirstOrDefault();
                }
            }
        }

        return cnt;
    }





    public List<Event> GetEvents()
    {
        List<Event> EventList = new List<Event>
            {
                new Event { Id = 1, Name =  "ミーティング", StartDate = new DateTime(2023, 1, 19), EndDate = new DateTime(2023, 1, 20), Color = "#7986CB"},
                new Event { Id = 2, Name =  "会議", StartDate = new DateTime(2023, 1, 11), EndDate = new DateTime(2023, 1, 14), Color = "#33B679"},
                new Event { Id = 3, Name =  "有給", StartDate = new DateTime(2022, 12, 9), EndDate = new DateTime(2023, 1, 13), Color = "#8E24AA"},
                new Event { Id = 4, Name =  "海外旅行", StartDate = new DateTime(2023, 1, 19), EndDate = new DateTime(2023, 1, 25), Color = "#E67C73"},
                new Event { Id = 5, Name =  "誕生日1", StartDate = new DateTime(2023, 1, 30), EndDate = new DateTime(2023, 1, 31), Color = "#F6BF26"},
                new Event { Id = 6, Name =  "誕生日2", StartDate = new DateTime(2023, 1, 24), EndDate = new DateTime(2023, 2, 28), Color = "#F4511E"},
                new Event { Id = 7, Name =  "誕生日3", StartDate = new DateTime(2023, 1, 21), EndDate = new DateTime(2023, 3, 28), Color = "#039BE5"},
                new Event { Id = 8, Name =  "誕生日4", StartDate = new DateTime(2023, 1, 25), EndDate = new DateTime(2023, 1, 29), Color = "#616161"},
                new Event { Id = 9, Name =  "（タイトルなし）", StartDate = new DateTime(2023, 1, 21), EndDate = new DateTime(2023, 1, 31), Color = "#3F51B5"},
                new Event { Id = 10, Name =  "誕生日6", StartDate = new DateTime(2023, 1, 31), EndDate = new DateTime(2023, 1, 31), Color = "#0B8043"},
                new Event { Id = 11, Name =  "誕生日7", StartDate = new DateTime(2023, 2, 1), EndDate = new DateTime(2023, 2, 1), Color = "#D50000"},
                new Event { Id = 12, Name =  "有給2", StartDate = new DateTime(2023, 1, 20), EndDate = new DateTime(2023, 1, 25), Color = "#cd74e6"},

                new Event { Id = -1, Name =  "元日", StartDate = new DateTime(2023, 1, 1), EndDate = new DateTime(2023, 1, 1), Color = "#009688"},
                new Event { Id = -2, Name =  "休日 元日", StartDate = new DateTime(2023, 1, 2), EndDate = new DateTime(2023, 1, 2), Color = "#009688"},
                new Event { Id = -3, Name =  "成人の日", StartDate = new DateTime(2023, 1, 9), EndDate = new DateTime(2023, 1, 9), Color = "#009688"},
                new Event { Id = -4, Name =  "建国記念の日", StartDate = new DateTime(2023, 2, 11), EndDate = new DateTime(2023, 2, 11), Color = "#009688"},
            };

        EventList.Sort((a, b) => a.StartDate.CompareTo(b.StartDate));

        return EventList;
    }

}