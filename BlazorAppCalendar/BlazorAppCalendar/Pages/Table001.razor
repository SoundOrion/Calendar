@page "/table001"

<PageTitle>テーブルを作成する</PageTitle>
<h1>カレンダーを作成する</h1>

<br />

<select @bind="selectedYear" class="form-select-sm">
    @if (years != null) foreach (var item in years)
        {
            <option value="@item.Key">@item.Value</option>
        }
</select>

<select @bind="selectedMonth" class="form-select-sm">
    @if (months != null) foreach (var item in months)
        {
            <option value="@item.Key">@item.Value</option>
        }
</select>

<br />

<br />
<button class="btn btn-primary" @onclick="previous">前月</button>
<button class="btn btn-primary" @onclick="next">翌月</button>
<br />

<div class="calendar-wrap">
    <table class="calendar">

        <colgroup></colgroup>

        <thead>
            <tr>
                @if (weekNames != null) foreach (var item in weekNames)
                    {
                        <th>@item.Value</th>
                    }
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < 6; i++)
            {
                dayOfWeek = GetDayOfWeek(selectedYear, selectedMonth, 1);
                var days = GetCalendarDays(dayOfWeek, i, selectedYear, selectedMonth);

                <tr>
                    @if (@days[0].Date.Month != selectedMonth)
                    {
                        <td class="sun2">@days[0].Date.Day</td>
                    }
                    else
                    {
                        <td class="sun">@days[0].Date.Day</td>
                    }

                    @for (int j = 1; j < 6; j++)
                    {
                        @if (@days[j].Date.Month != selectedMonth)
                        {
                            <td class="notApplicable">@days[j].Date.Day</td>
                        }
                        else
                        {
                            <td>@days[j].Date.Day</td>
                        }
                    }

                    @if (@days[6].Date.Month != selectedMonth)
                    {
                        <td class="sat2">@days[6].Date.Day</td>
                    }
                    else
                    {
                        <td class="sat">@days[6].Date.Day</td>
                    }

                </tr>
            }
        </tbody>

    </table>
</div>

@code {

    private Dictionary<string, string> weekNames = new Dictionary<string, string>();
    private Dictionary<string, int> years = new Dictionary<string, int>();
    private Dictionary<string, int> months = new Dictionary<string, int>();

    private int selectedYear;
    private int selectedMonth;

    @*    int year = 2022;
    int month = 12;*@

    DayOfWeek dayOfWeek;
    int daysInMonth;

    @*private List<Calendar> CalendarList;*@


    private DayOfWeek GetDayOfWeek(int Year, int Month, int Day)
    {
        DateTime week = new DateTime(Year, Month, Day);
        return week.DayOfWeek;
    }

    private List<Calendar> GetCalendarDays(DayOfWeek dayOfWeek, int rowIndex, int Year, int Month)
    {
        int adjsut = 0;

        switch (dayOfWeek)
        {
            case DayOfWeek.Sunday:
                {
                    adjsut = 0;
                }
                break;
            case DayOfWeek.Monday:
                {
                    adjsut = 1;
                }
                break;
            case DayOfWeek.Tuesday:
                {
                    adjsut = 2;
                }
                break;
            case DayOfWeek.Wednesday:
                {
                    adjsut = 3;
                }
                break;
            case DayOfWeek.Thursday:
                {
                    adjsut = 4;
                }
                break;
            case DayOfWeek.Friday:
                {
                    adjsut = 5;
                }
                break;
            case DayOfWeek.Saturday:
                {
                    adjsut = 6;
                }
                break;
        }

        int daysInMonth = DateTime.DaysInMonth(selectedYear, selectedMonth);
        int daysInPrevMonth;
        if (selectedMonth == 1)
        {
            daysInPrevMonth = DateTime.DaysInMonth(selectedYear - 1, 12);
        }
        else
        {
            daysInPrevMonth = DateTime.DaysInMonth(selectedYear, selectedMonth - 1);
        }

        List<Calendar> calendars = new List<Calendar>();

        for (int i = 0; i < 7; i++)
        {
            var calendar = new Calendar();

            var day = 7 * rowIndex + (i + 1) - adjsut;

            if (day < 1)
            {
                //前月
                if (selectedMonth == 1)
                {
                    calendar.Date = new DateTime(selectedYear - 1, 12, daysInPrevMonth + day);
                }
                else
                {
                    calendar.Date = new DateTime(selectedYear, selectedMonth - 1, daysInPrevMonth + day);
                }
            }
            else if (day > daysInMonth)
            {
                //翌月
                if (selectedMonth == 12)
                {
                    calendar.Date = new DateTime(selectedYear + 1, 1, day - daysInMonth);
                }
                else
                {
                    calendar.Date = new DateTime(selectedYear, selectedMonth + 1, day - daysInMonth);
                }
            }
            else
            {
                //当月
                calendar.Date = new DateTime(selectedYear, selectedMonth, day);
            }

            calendars.Add(calendar);
        }

        return calendars;
    }

    protected override void OnInitialized()
    {
        selectedYear = DateTime.Now.Year;
        selectedMonth = DateTime.Now.Month;

        dayOfWeek = GetDayOfWeek(selectedYear, selectedMonth, 1);

        @*        DateTime startDate = new DateTime(selectedYear, selectedMonth, 1);

        int daysInMonth = DateTime.DaysInMonth(selectedYear, selectedMonth);
        DateTime endDate = new DateTime(selectedYear, selectedMonth, daysInMonth);*@

        //CalendarList = new List<Calendar>
        //{
        //    new Fruits { Date = new DateTime(2017, 12, 1), Product="りんご", Quantity= 10000, Price=100},
        //    new Fruits { Date = new DateTime(2018, 6, 1), Product="みかん", Quantity= 4000, Price=120},
        //    new Fruits { Date = new DateTime(2019, 12, 1), Product="バナナ", Quantity= 5000, Price=90},
        //    new Fruits { Date = new DateTime(2019, 6, 1), Product="みかん", Quantity= 40000, Price=150},
        //    new Fruits { Date = new DateTime(2020, 12, 1), Product="バナナ", Quantity= 100000, Price=200}
        //};

        weekNames = new Dictionary<string, string>
        {
            {"日", "日"},
            {"月", "月"},
            {"火", "火"},
            {"水", "水"},
            {"木", "木"},
            {"金", "金"},
            {"土", "土"},
        };

        years = new Dictionary<string, int>
        {
            {"2020", 2020},
            {"2021", 2021},
            {"2022", 2022},
            {"2023", 2023},
            {"2024", 2024},
            {"2025", 2025},
        };

        months = new Dictionary<string, int>
        {
            {"1", 1},
            {"2", 2},
            {"3", 3},
            {"4", 4},
            {"5", 5},
            {"6", 6},
            {"7", 7},
            {"8", 8},
            {"9", 9},
            {"10", 10},
            {"11", 11},
            {"12", 12},
        };
    }

    public class Calendar
    {
        public DateTime Date { get; set; }
    }

    private void next()
    {
        selectedYear = (selectedMonth == 12) ? selectedYear + 1 : selectedYear;
        selectedMonth = (selectedMonth == 12) ? 1 : selectedMonth + 1;
    }

    private void previous()
    {
        selectedYear = (selectedMonth == 1) ? selectedYear - 1 : selectedYear;
        selectedMonth = (selectedMonth == 1) ? 12 : selectedMonth - 1;
    }
}
